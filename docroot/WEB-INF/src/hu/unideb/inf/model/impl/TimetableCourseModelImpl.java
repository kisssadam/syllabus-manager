/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hu.unideb.inf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import hu.unideb.inf.model.TimetableCourse;
import hu.unideb.inf.model.TimetableCourseModel;
import hu.unideb.inf.model.TimetableCourseSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TimetableCourse service. Represents a row in the &quot;unideb_syllabus_manager_TimetableCourse&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link hu.unideb.inf.model.TimetableCourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TimetableCourseImpl}.
 * </p>
 *
 * @author Adam Kiss
 * @see TimetableCourseImpl
 * @see hu.unideb.inf.model.TimetableCourse
 * @see hu.unideb.inf.model.TimetableCourseModel
 * @generated
 */
@JSON(strict = true)
public class TimetableCourseModelImpl extends BaseModelImpl<TimetableCourse>
	implements TimetableCourseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a timetable course model instance should use the {@link hu.unideb.inf.model.TimetableCourse} interface instead.
	 */
	public static final String TABLE_NAME = "unideb_syllabus_manager_TimetableCourse";
	public static final Object[][] TABLE_COLUMNS = {
			{ "timetableCourseId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "courseId", Types.BIGINT },
			{ "semesterId", Types.BIGINT },
			{ "timetableCourseCode", Types.VARCHAR },
			{ "subjectType", Types.VARCHAR },
			{ "recommendedTerm", Types.INTEGER },
			{ "limit_", Types.INTEGER },
			{ "classScheduleInfo", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table unideb_syllabus_manager_TimetableCourse (timetableCourseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,courseId LONG,semesterId LONG,timetableCourseCode VARCHAR(75) null,subjectType VARCHAR(75) null,recommendedTerm INTEGER,limit_ INTEGER,classScheduleInfo VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table unideb_syllabus_manager_TimetableCourse";
	public static final String ORDER_BY_JPQL = " ORDER BY timetableCourse.timetableCourseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY unideb_syllabus_manager_TimetableCourse.timetableCourseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.hu.unideb.inf.model.TimetableCourse"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.hu.unideb.inf.model.TimetableCourse"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.hu.unideb.inf.model.TimetableCourse"),
			true);
	public static long COURSEID_COLUMN_BITMASK = 1L;
	public static long SEMESTERID_COLUMN_BITMASK = 2L;
	public static long TIMETABLECOURSECODE_COLUMN_BITMASK = 4L;
	public static long TIMETABLECOURSEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TimetableCourse toModel(TimetableCourseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TimetableCourse model = new TimetableCourseImpl();

		model.setTimetableCourseId(soapModel.getTimetableCourseId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCourseId(soapModel.getCourseId());
		model.setSemesterId(soapModel.getSemesterId());
		model.setTimetableCourseCode(soapModel.getTimetableCourseCode());
		model.setSubjectType(soapModel.getSubjectType());
		model.setRecommendedTerm(soapModel.getRecommendedTerm());
		model.setLimit(soapModel.getLimit());
		model.setClassScheduleInfo(soapModel.getClassScheduleInfo());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TimetableCourse> toModels(
		TimetableCourseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TimetableCourse> models = new ArrayList<TimetableCourse>(soapModels.length);

		for (TimetableCourseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_UNIDEB_SYLLABUS_MANAGER_LECTURERS_TIMETABLECOURSES_NAME =
		"unideb_syllabus_manager_Lecturers_TimetableCourses";
	public static final Object[][] MAPPING_TABLE_UNIDEB_SYLLABUS_MANAGER_LECTURERS_TIMETABLECOURSES_COLUMNS =
		{
			{ "lecturerId", Types.BIGINT },
			{ "timetableCourseId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_UNIDEB_SYLLABUS_MANAGER_LECTURERS_TIMETABLECOURSES_SQL_CREATE =
		"create table unideb_syllabus_manager_Lecturers_TimetableCourses (lecturerId LONG not null,timetableCourseId LONG not null,primary key (lecturerId, timetableCourseId))";
	public static final boolean FINDER_CACHE_ENABLED_UNIDEB_SYLLABUS_MANAGER_LECTURERS_TIMETABLECOURSES =
		GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.unideb_syllabus_manager_Lecturers_TimetableCourses"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.hu.unideb.inf.model.TimetableCourse"));

	public TimetableCourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _timetableCourseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTimetableCourseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _timetableCourseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TimetableCourse.class;
	}

	@Override
	public String getModelClassName() {
		return TimetableCourse.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("timetableCourseId", getTimetableCourseId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("courseId", getCourseId());
		attributes.put("semesterId", getSemesterId());
		attributes.put("timetableCourseCode", getTimetableCourseCode());
		attributes.put("subjectType", getSubjectType());
		attributes.put("recommendedTerm", getRecommendedTerm());
		attributes.put("limit", getLimit());
		attributes.put("classScheduleInfo", getClassScheduleInfo());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long timetableCourseId = (Long)attributes.get("timetableCourseId");

		if (timetableCourseId != null) {
			setTimetableCourseId(timetableCourseId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long semesterId = (Long)attributes.get("semesterId");

		if (semesterId != null) {
			setSemesterId(semesterId);
		}

		String timetableCourseCode = (String)attributes.get(
				"timetableCourseCode");

		if (timetableCourseCode != null) {
			setTimetableCourseCode(timetableCourseCode);
		}

		String subjectType = (String)attributes.get("subjectType");

		if (subjectType != null) {
			setSubjectType(subjectType);
		}

		Integer recommendedTerm = (Integer)attributes.get("recommendedTerm");

		if (recommendedTerm != null) {
			setRecommendedTerm(recommendedTerm);
		}

		Integer limit = (Integer)attributes.get("limit");

		if (limit != null) {
			setLimit(limit);
		}

		String classScheduleInfo = (String)attributes.get("classScheduleInfo");

		if (classScheduleInfo != null) {
			setClassScheduleInfo(classScheduleInfo);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getTimetableCourseId() {
		return _timetableCourseId;
	}

	@Override
	public void setTimetableCourseId(long timetableCourseId) {
		_timetableCourseId = timetableCourseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	@JSON
	@Override
	public long getSemesterId() {
		return _semesterId;
	}

	@Override
	public void setSemesterId(long semesterId) {
		_columnBitmask |= SEMESTERID_COLUMN_BITMASK;

		if (!_setOriginalSemesterId) {
			_setOriginalSemesterId = true;

			_originalSemesterId = _semesterId;
		}

		_semesterId = semesterId;
	}

	public long getOriginalSemesterId() {
		return _originalSemesterId;
	}

	@JSON
	@Override
	public String getTimetableCourseCode() {
		if (_timetableCourseCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _timetableCourseCode;
		}
	}

	@Override
	public void setTimetableCourseCode(String timetableCourseCode) {
		_columnBitmask |= TIMETABLECOURSECODE_COLUMN_BITMASK;

		if (_originalTimetableCourseCode == null) {
			_originalTimetableCourseCode = _timetableCourseCode;
		}

		_timetableCourseCode = timetableCourseCode;
	}

	public String getOriginalTimetableCourseCode() {
		return GetterUtil.getString(_originalTimetableCourseCode);
	}

	@JSON
	@Override
	public String getSubjectType() {
		if (_subjectType == null) {
			return StringPool.BLANK;
		}
		else {
			return _subjectType;
		}
	}

	@Override
	public void setSubjectType(String subjectType) {
		_subjectType = subjectType;
	}

	@JSON
	@Override
	public int getRecommendedTerm() {
		return _recommendedTerm;
	}

	@Override
	public void setRecommendedTerm(int recommendedTerm) {
		_recommendedTerm = recommendedTerm;
	}

	@JSON
	@Override
	public int getLimit() {
		return _limit;
	}

	@Override
	public void setLimit(int limit) {
		_limit = limit;
	}

	@JSON
	@Override
	public String getClassScheduleInfo() {
		if (_classScheduleInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _classScheduleInfo;
		}
	}

	@Override
	public void setClassScheduleInfo(String classScheduleInfo) {
		_classScheduleInfo = classScheduleInfo;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TimetableCourse.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TimetableCourse toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TimetableCourse)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TimetableCourseImpl timetableCourseImpl = new TimetableCourseImpl();

		timetableCourseImpl.setTimetableCourseId(getTimetableCourseId());
		timetableCourseImpl.setGroupId(getGroupId());
		timetableCourseImpl.setCompanyId(getCompanyId());
		timetableCourseImpl.setUserId(getUserId());
		timetableCourseImpl.setUserName(getUserName());
		timetableCourseImpl.setCreateDate(getCreateDate());
		timetableCourseImpl.setModifiedDate(getModifiedDate());
		timetableCourseImpl.setCourseId(getCourseId());
		timetableCourseImpl.setSemesterId(getSemesterId());
		timetableCourseImpl.setTimetableCourseCode(getTimetableCourseCode());
		timetableCourseImpl.setSubjectType(getSubjectType());
		timetableCourseImpl.setRecommendedTerm(getRecommendedTerm());
		timetableCourseImpl.setLimit(getLimit());
		timetableCourseImpl.setClassScheduleInfo(getClassScheduleInfo());
		timetableCourseImpl.setDescription(getDescription());

		timetableCourseImpl.resetOriginalValues();

		return timetableCourseImpl;
	}

	@Override
	public int compareTo(TimetableCourse timetableCourse) {
		long primaryKey = timetableCourse.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TimetableCourse)) {
			return false;
		}

		TimetableCourse timetableCourse = (TimetableCourse)obj;

		long primaryKey = timetableCourse.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TimetableCourseModelImpl timetableCourseModelImpl = this;

		timetableCourseModelImpl._originalCourseId = timetableCourseModelImpl._courseId;

		timetableCourseModelImpl._setOriginalCourseId = false;

		timetableCourseModelImpl._originalSemesterId = timetableCourseModelImpl._semesterId;

		timetableCourseModelImpl._setOriginalSemesterId = false;

		timetableCourseModelImpl._originalTimetableCourseCode = timetableCourseModelImpl._timetableCourseCode;

		timetableCourseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TimetableCourse> toCacheModel() {
		TimetableCourseCacheModel timetableCourseCacheModel = new TimetableCourseCacheModel();

		timetableCourseCacheModel.timetableCourseId = getTimetableCourseId();

		timetableCourseCacheModel.groupId = getGroupId();

		timetableCourseCacheModel.companyId = getCompanyId();

		timetableCourseCacheModel.userId = getUserId();

		timetableCourseCacheModel.userName = getUserName();

		String userName = timetableCourseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			timetableCourseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			timetableCourseCacheModel.createDate = createDate.getTime();
		}
		else {
			timetableCourseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			timetableCourseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			timetableCourseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		timetableCourseCacheModel.courseId = getCourseId();

		timetableCourseCacheModel.semesterId = getSemesterId();

		timetableCourseCacheModel.timetableCourseCode = getTimetableCourseCode();

		String timetableCourseCode = timetableCourseCacheModel.timetableCourseCode;

		if ((timetableCourseCode != null) &&
				(timetableCourseCode.length() == 0)) {
			timetableCourseCacheModel.timetableCourseCode = null;
		}

		timetableCourseCacheModel.subjectType = getSubjectType();

		String subjectType = timetableCourseCacheModel.subjectType;

		if ((subjectType != null) && (subjectType.length() == 0)) {
			timetableCourseCacheModel.subjectType = null;
		}

		timetableCourseCacheModel.recommendedTerm = getRecommendedTerm();

		timetableCourseCacheModel.limit = getLimit();

		timetableCourseCacheModel.classScheduleInfo = getClassScheduleInfo();

		String classScheduleInfo = timetableCourseCacheModel.classScheduleInfo;

		if ((classScheduleInfo != null) && (classScheduleInfo.length() == 0)) {
			timetableCourseCacheModel.classScheduleInfo = null;
		}

		timetableCourseCacheModel.description = getDescription();

		String description = timetableCourseCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			timetableCourseCacheModel.description = null;
		}

		return timetableCourseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{timetableCourseId=");
		sb.append(getTimetableCourseId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", semesterId=");
		sb.append(getSemesterId());
		sb.append(", timetableCourseCode=");
		sb.append(getTimetableCourseCode());
		sb.append(", subjectType=");
		sb.append(getSubjectType());
		sb.append(", recommendedTerm=");
		sb.append(getRecommendedTerm());
		sb.append(", limit=");
		sb.append(getLimit());
		sb.append(", classScheduleInfo=");
		sb.append(getClassScheduleInfo());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("hu.unideb.inf.model.TimetableCourse");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>timetableCourseId</column-name><column-value><![CDATA[");
		sb.append(getTimetableCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>semesterId</column-name><column-value><![CDATA[");
		sb.append(getSemesterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timetableCourseCode</column-name><column-value><![CDATA[");
		sb.append(getTimetableCourseCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subjectType</column-name><column-value><![CDATA[");
		sb.append(getSubjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recommendedTerm</column-name><column-value><![CDATA[");
		sb.append(getRecommendedTerm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>limit</column-name><column-value><![CDATA[");
		sb.append(getLimit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classScheduleInfo</column-name><column-value><![CDATA[");
		sb.append(getClassScheduleInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TimetableCourse.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TimetableCourse.class
		};
	private long _timetableCourseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _semesterId;
	private long _originalSemesterId;
	private boolean _setOriginalSemesterId;
	private String _timetableCourseCode;
	private String _originalTimetableCourseCode;
	private String _subjectType;
	private int _recommendedTerm;
	private int _limit;
	private String _classScheduleInfo;
	private String _description;
	private long _columnBitmask;
	private TimetableCourse _escapedModel;
}